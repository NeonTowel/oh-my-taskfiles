version: '3'

tasks:
  config-global:
    deps: [ ":tools:gum:install" ]
    desc: "[GIT] âœ¨ Configure git globally"
    cmds:
      - |
        user_name=$(gum input --placeholder "Enter your name")
        user_email=$(gum input --placeholder "Enter your email")
        echo "Set global user name to $user_name"
        git config --global user.name "$user_name"
        echo "Set global user email to $user_email"
        git config --global user.email "$user_email"
        echo "Set global core pager to gum"
        git config --global core.pager "gum pager"
        echo "Set global gpg format to ssh"
        git config --global gpg.format "ssh"
        echo "Set global commit.gpgsign to true"
        git config --global commit.gpgsign true
        echo "Set global pull.rebase to true"
        git config --global pull.rebase true
  
  mkdir:
    desc: "[GIT] Create a git repo directory structure"
    cmds:
      - task: :oslib:coreutils:install
        platforms: [windows]
      - |
        mkdir -p $HOME/git/{github.com,dev.azure.com,gitlab.com}
        echo "Created git repo directory structure"
        echo "You can now clone your repositories into the following directories:"
        echo "  $HOME/git/github.com"
        echo "  $HOME/git/dev.azure.com"
        echo "  $HOME/git/gitlab.com"
        echo
        echo "You should create a ssh config and key for each organization/account you work with."
        echo
        echo "Example:"
        echo "  $HOME/git/github.com/yourname/config"
        echo "  $HOME/git/github.com/yourname/key.pub"
  
  create-config:
    desc: "[GIT] Create a ssh config and key for a specific organization/account"
    cmds:
      - task: :oslib:coreutils:install
        platforms: [windows]
      - |
        GIT_ROOT=$HOME/git
        git_provider=$(gum choose "github.com" "dev.azure.com" "gitlab.com")
        echo "You are creating a new organization/account in $GIT_ROOT/$git_provider"
        org_name=$(gum input --placeholder "Enter the organization or account name")
        echo "Creating config and key files for $GIT_ROOT/$git_provider/$org_name"
        continue=$(gum confirm "Continue?")
        if [ "$continue" = "no" ]; then
          echo "Aborting"
          exit 1
        fi
        mkdir -p $GIT_ROOT/$git_provider/$org_name
        touch $GIT_ROOT/$git_provider/$org_name/config
        touch $GIT_ROOT/$git_provider/$org_name/key.pub
        echo "Created placeholder Git ssh config and public key."
        echo "You can now add the following to your Git ssh config:"
        echo
        echo "  $GIT_ROOT/$git_provider/$org_name/config"
        echo "  $GIT_ROOT/$git_provider/$org_name/key.pub"
        echo
        create_config=$(gum confirm "Create configuration now?")
        if [ "$create_config" = "no" ]; then
          echo "Aborting"
          exit 1
        fi
        pick=$(gum choose --header "Select the ssh key to use" "agent" "input manually")
        if [ "$pick" = "agent" ]; then
          ssh_key=$(ssh-add -L | gum filter --header "Select the ssh key to use for $git_provider/$org_name:")
        else
          ssh_key=$(gum input --placeholder "Enter the ssh public key")
        fi
        if [ -z "$ssh_key" ]; then
            echo "Aborting"
            exit 1
        fi
        echo "$ssh_key" > $GIT_ROOT/$git_provider/$org_name/key.pub
        echo "Wrote Git ssh key to $GIT_ROOT/$git_provider/$org_name/key.pub"
        bash -c "
        cat <<EOF >> $GIT_ROOT/$git_provider/$org_name/config
        Host $git_provider
          HostName $git_provider
          User git
          IdentityFile $GIT_ROOT/$git_provider/$org_name/key.pub
          IdentitiesOnly yes
        EOF
        "
        echo "Wrote Git ssh config to $GIT_ROOT/$git_provider/$org_name/config"