version: '3'

tasks:
  config-global:
    deps: [ ":tools:gum:install" ]
    desc: "[GIT] âœ¨ Configure git globally"
    cmds:
      - |
        if [ "{{ .UNATTENDED }}" = "true" ]; then
          echo "Unattended mode enabled, skipping interactive configuration."
          if [ ! -z "$(git config --global user.name)" ]; then
            user_name=$(git config --global user.name)
          fi
          if [ ! -z "$(git config --global user.email)" ]; then
            user_email=$(git config --global user.email)
          fi
        else
          user_name=$(gum input --value "$(git config --global user.name)" --placeholder "Enter your name" --header "Git Author Name (global)")
          user_email=$(gum input --value "$(git config --global user.email)" --placeholder "Enter your email" --header "Git Author Email (global)")
        fi
        
        if [ -z "$user_name" ]; then
          echo "Error: User name is not set"
          exit 1
        fi
        if [ -z "$user_email" ]; then
          echo "Error: User email is not set"
          exit 1
        fi
        
        if [ "{{ .UNATTENDED }}" = "false" ]; then
          gum format -- "
          # Global Git Configuration Defaults

          | Setting               | Value                                  |
          |-----------------------|----------------------------------------|
          | User Name             | \`$user_name\`                         |
          | User Email            | \`$user_email\`                        |
          | Core Pager            | \`gum pager\`                          |
          | GPG Format            | \`ssh\`                               |
          | Commit GPG Sign       | \`true\`                              |
          | Pull Rebase           | \`true\`                              |
          $(if [ -f 'C:\Windows\System32\OpenSSH\ssh.exe' ]; then
            echo '| SSH Command           | `C:\Windows\System32\OpenSSH\ssh.exe` |'
            echo '| Core Autocrlf         | `true`                              |'
          fi)
          
          These settings will be used for \`all\` git repositories, but they can be overridden
          on each repository using \`local\` configuration.
          "
          echo
          continue=$(gum confirm "Continue?")
          if [ "$continue" = "no" ]; then
            echo "Aborting"
            exit 0
          fi
        fi
        if [ ! -z "$user_name" ]; then
          git config --global user.name "$user_name"
        fi
        if [ ! -z "$user_email" ]; then
          git config --global user.email "$user_email"
        fi
        git config --global core.pager "gum pager"
        git config --global gpg.format "ssh"
        git config --global commit.gpgsign true
        git config --global pull.rebase true
        if [ -f "C:\Windows\System32\OpenSSH\ssh.exe" ]; then
          git config --global core.sshCommand "C:/Windows/System32/OpenSSH/ssh.exe"
          git config --global core.autocrlf true
        fi
        echo "Completed!"
        echo

  create-config:
    deps: [ ":tools:fzf:install", ":tools:coreutils:install" ]
    desc: "[GIT] Create a ssh config and key for a specific organization/account"
    vars:
      HOME: '{{ .HOME | default .USERPROFILE | replace "\\" "/" }}'
      GIT_ROOT: '{{ joinPath .HOME "git" | replace "\\" "/" }}'
      GIT_PATH_FORMAT: '{{ joinPath .GIT_ROOT "%s" "%s" | replace "\\" "/" }}'
    cmds:
      - |
        if [ ! -d "{{ .HOME }}" ]; then
          echo "Error: HOME variable is not set or is not a directory ({{ .HOME }})"
          exit 1
        fi
        git_provider=$(gum choose "github.com" "dev.azure.com" "gitlab.com")
        echo "You are creating a new configuration for '${git_provider}' in '{{ .GIT_ROOT }}'."
        org_name=$(gum input --placeholder "Enter the organization or account name")
        git_path=$(printf "{{ .GIT_PATH_FORMAT }}" "${git_provider}" "${org_name}")
        pick=$(gum choose --header "Select the ssh key to use" "agent" "input manually")
        if [ "$pick" = "agent" ]; then
          ssh_key=$(ssh-add -L | fzf --prompt "Select the ssh key to use for $git_provider/$org_name: ")
        else
          ssh_key=$(gum input --placeholder "Enter the ssh public key")
        fi
        if [ -z "$ssh_key" ]; then
            echo "Aborting"
            exit 1
        fi
        ssh_key_fingerprint=$(echo "$ssh_key" | ssh-keygen -l -f -)
        gum format -- "
        # New Git SSH Configuration

        | Field               | Value                    |
        |---------------------|--------------------------|
        | Provider            | \`$git_provider\`          |
        | Account             | \`$org_name\`              |
        | SSH Key Fingerprint | \`$ssh_key_fingerprint\`   |
        | Config Path         | \`$git_path/config\`       |
        | Public Key Path     | \`$git_path/key.pub\`      |
        |---------------------|--------------------------|
        "

        continue=$(gum confirm "Continue?")
        if [ "$continue" = "no" ]; then
          echo "Aborting"
          exit 1
        fi
        echo "Writing..."
        mkdir -p $git_path
        touch $git_path/config
        touch $git_path/key.pub
        echo "$ssh_key" > $git_path/key.pub
        cat <<EOF >> $git_path/config
        Host $git_provider
          HostName $git_provider
          User git
          IdentityFile $git_path/key.pub
          IdentitiesOnly yes
        EOF
        echo "Completed!"
        echo
