version: '3'

vars:
  OP_VERSION_WINDOWS: "2.14.0"

tasks:
  choose-keys:
    silent: true
    platforms: [windows]
    deps: [ "::tools:jq:install" ]
    desc: "[1PASSWORD:SSH] Choose SSH keys to add to 1Password SSH agent"
    cmds:
      - |
        if ! command -v jq >/dev/null 2>&1; then
          echo "ERROR: jq command is not available"
          echo "Please install jq first."
          exit 1
        fi
        if ! command -v tr >/dev/null 2>&1; then
          echo "ERROR: tr command is not available"
          echo "Please install tr (coreutils) first."
          exit 1
        fi
        if ! command -v op >/dev/null 2>&1; then
          echo "ERROR: op command is not available"
          echo "Please install 1Password CLI first."
          exit 1
        fi
        # check if ssh-agent is running
        if ! ssh-add -l >/dev/null 2>&1; then
          echo "SSH agent is not running"
          echo "Please configure 1Password and enable SSH agent first."
          exit 1
        fi
      - |
        ssh_public_keys=()

        mock_ssh_keys=false
        if [ "$mock_ssh_keys" = true ]; then
          ssh_public_keys+=(
            "Personal/ssh-rsa-test"
            "Personal/ssh-ed25519-test"
            "Personal/ssh-ecdsa-test"
            "Personal/ssh-dsa-test"
            "Personal/ssh-rsa-test"
            "Personal/ssh-ed25519-test"
            "Personal/ssh-ecdsa-test"
          )
          echo "Using mock SSH keys"
        else
          echo "Looking up 1Password vaults..."
          vaults=$(op vault list --format=json | jq -r '.[].name' | tr -d '\r')
          if [ $? -ne 0 ] || [ -z "$vaults" ]; then
            echo "ERROR: Failed to retrieve 1Password vaults or no vaults found."
            exit 1
          fi
          echo "Looking up SSH keys, this might take a while..."
          ssh_public_keys=()
          for vault_name in $vaults; do
            ssh_keys=$(op item list --vault="$vault_name" --categories="SSH Key" --format=json | jq -r '.[].title' | tr -d '\r')
            #ssh_keys should be added to ssh_public_keys array in format of "vault_name/item_title"
            for item_title in $ssh_keys; do
              ssh_public_keys+=("$vault_name/$item_title")
            done
          done
        fi

        if [ ${#ssh_public_keys[@]} -eq 0 ]; then
          echo "No SSH keys found. Aborting."
          exit 0
        fi

        selected_keys_input=$(gum choose --header="Select SSH keys to add to 1Password SSH agent" --limit=100 "${ssh_public_keys[@]}")
        # Use a POSIX-compatible way to split the input into an array
        selected_keys_input="${selected_keys_input//$'\r'/}"  # Remove any carriage returns
        selected_keys=()
        while IFS= read -r line; do
          [ -n "$line" ] && selected_keys+=("$line")
        done <<< "$selected_keys_input"

        if [[ ${#selected_keys[@]} -gt 0 ]]; then
          echo "Selected ${#selected_keys[@]} keys:"
          # Loop and print each key
          for key in "${selected_keys[@]}"; do
            echo "  - $key"
          done
        else
          echo "No keys selected. Exiting."
          exit 1
        fi

        echo "Building 1Password SSH agent toml file..."
        toml_content=""
        for key in "${selected_keys[@]}"; do
          vault_name=$(echo "$key" | cut -d'/' -f1)
          item_title=$(echo "$key" | cut -d'/' -f2)
          toml_content+="[[ssh-keys]]\n"
          toml_content+="item = \"$item_title\"\n"
          toml_content+="vault = \"$vault_name\"\n"
          toml_content+="\n"
        done  

        # create the toml file
        toml_file="$HOME/AppData/Local/1Password/config/ssh/agent.toml"

        # create the directory if it doesn't exist
        mkdir -p "$(dirname "$toml_file")"

        # prompt user to confirm to overwrite the file if it exists
        if [ -f "$toml_file" ]; then
          if ! gum confirm "1Password SSH agent toml file already exists at $toml_file. Overwrite?"; then
            echo "Aborting."
            exit 1
          fi
        fi

        # create the file if it doesn't exist
        touch "$toml_file"

        echo -e "$toml_content" > "$toml_file"
        echo "1Password SSH agent toml file has been created at $toml_file."
        echo ""

