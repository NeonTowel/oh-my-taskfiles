version: '3'

vars:
  NPIPE_RELAY_VERSION: "0.1.0"

tasks:
  npiperelay:download:
    platforms: [windows]
    deps: [ ":tools:7zip:install"]
    internal: true
    cmds:
      - |
        if [ ! -f C:\\npiperelay\\npiperelay.exe ]; then
          echo "Downloading npiperelay.exe..."
          mkdir -p C:\\npiperelay
          curl -L https://github.com/jstarks/npiperelay/releases/download/v{{ .NPIPE_RELAY_VERSION }}/npiperelay_windows_amd64.zip -o C:\\npiperelay\\npiperelay.zip
          7z x -y -aoa -bso0 -bse0 C:\\npiperelay\\npiperelay.zip -oC:\\npiperelay
          rm C:\\npiperelay\\npiperelay.zip
          if [ -f C:\\npiperelay\\npiperelay.exe ]; then
            echo "npiperelay.exe downloaded to C:\\npiperelay\\npiperelay.exe"
          else
            echo "ERROR: Failed to download npiperelay.exe"
            exit 1
          fi
        else
          echo "npiperelay.exe already exists in C:\npiperelay\npiperelay.exe"
        fi
  
  npiperelay:symlink:
    internal: true
    cmds:
      - |
        # if OS is set and is linux, use sudo to create the symlink
        if [ -z "{{ .OS }}" ] || [ "{{ .OS }}" = "linux" ]; then
          echo "OS environment variable set to linux, using sudo to create the symlink..."
          if [ ! -f /mnt/c/npiperelay/npiperelay.exe ]; then
            echo "ERROR: npiperelay.exe not found, please run task wsl:npiperelay:download first."
            exit 1
          fi
          sudo ln -s /mnt/c/npiperelay/npiperelay.exe /usr/local/bin/npiperelay.exe
        elif [ "{{ .OS }}" = "Windows_NT" ]; then
          echo "OS environment variable set to windows, using wsl to create the symlink..."
          if ! command -v wsl &> /dev/null; then
            echo "ERROR: wsl command not found, please install WSL first."
            exit 1
          fi
          if [ $(wsl --list --quiet | wc -l) -gt 1 ]; then
            echo "ERROR: More than one WSL instances detected. Switch to the desired WSL instance and run the task 'wsl:npiperelay:symlink'"
            exit 1
          fi
          if [ ! -f C:\\npiperelay\\npiperelay.exe ]; then
            echo "ERROR: npiperelay.exe not found, please run task wsl:npiperelay:download first."
            exit 1
          fi
          if wsl test -f /usr/local/bin/npiperelay.exe; then
            echo "npiperelay.exe already symlinked to /usr/local/bin/npiperelay.exe"
          else
            wsl sudo ln -s /mnt/c/npiperelay/npiperelay.exe /usr/local/bin/npiperelay.exe
          fi
        fi

  1password:configure:windows:
    internal: true
    platforms: [windows]
    cmds:
      - task: npiperelay:download
      - task: npiperelay:symlink
      - task: 1password:git:configure

  1password:git:configure:
    desc: "[WSL] Configure Git to use 1Password SSH Agent"
    cmds:
      - |
        # if OS is linux get the username using cmd.exe
        if [ "{{ .OS }}" = "linux" ]; then
          echo "OS environment variable set to linux, getting username..."
          # if cmd.exe is not found, throw an error
          if [ ! -f /mnt/c/Windows/System32/cmd.exe ]; then
            echo "ERROR: cmd.exe not found, please install cmd.exe first."
            exit 1
          fi
          username=$(/mnt/c/Windows/System32/cmd.exe /c "echo %USERNAME%")
          echo "Username: $username"
          # if git is not found, throw an error
          if ! command -v git &> /dev/null; then
            echo "ERROR: git command not found, please install git first."
            exit 1
          fi
        elif [ "{{ .OS }}" = "Windows_NT" ]; then
          echo "OS environment variable set to windows, getting username..."
          # if wsl command is not found, throw an error
          if ! command -v wsl &> /dev/null; then
            echo "ERROR: wsl command not found, please install WSL first."
            exit 1
          fi
          username=$(powershell -c '[Console]::WriteLine($env:USERNAME)' | tr -d '\r\n')

          # if git is not found, throw an error
          if ! wsl zsh -lic 'command -v git >/dev/null 2>&1'; then
            echo "ERROR: git command not found, please install git first."
            exit 1
          fi
        else
          echo "ERROR: OS environment variable not set or not supported"
          exit 1
        fi

        # if username is not set, throw an error
        if [ -z "$username" ]; then
          echo "ERROR: Username not found"
          exit 1
        fi

        # see if ssh.exe and op-ssh-sign.exe are available on the system, check windows and wsl paths, if not throw an error
        ssh_exe_path=""
        if [ -f /mnt/c/Windows/System32/OpenSSH/ssh.exe ]; then
          ssh_exe_path="/mnt/c/Windows/System32/OpenSSH/ssh.exe"
        elif [ -f C:\\Windows\\System32\\OpenSSH\\ssh.exe ]; then
          ssh_exe_path="C:\\\Windows\\\System32\\\OpenSSH\\\ssh.exe"
        else
          echo "ERROR: ssh.exe not found on Windows or WSL"
          exit 1
        fi
        op_ssh_sign_exe_path=""
        if [ -f /mnt/c/Users/$username/AppData/Local/1Password/app/8/op-ssh-sign.exe ]; then
          op_ssh_sign_exe_path="/mnt/c/Users/$username/AppData/Local/1Password/app/8/op-ssh-sign.exe"
        elif [ -f C:\\Users\\$username\\AppData\\Local\\1Password\\app\\8\\op-ssh-sign.exe ]; then
          op_ssh_sign_exe_path="C:\\\Users\\\\$username\\\AppData\\\Local\\\1Password\\\app\\\8\\\op-ssh-sign.exe"
        else
          echo "ERROR: op-ssh-sign.exe not found on Windows or WSL (user: $username)"
          exit 1
        fi

        # if OS is linux configure git directly, if OS is Windows_NT configure git using wsl
        if [ "{{ .OS }}" = "linux" ]; then
          echo "OS environment variable set to linux, configuring git directly..."
          git config --global core.sshcommand $ssh_exe_path
          git config --global gpg.ssh.program $op_ssh_sign_exe_path
        elif [ "{{ .OS }}" = "Windows_NT" ]; then
          echo "OS environment variable set to windows, configuring git using wsl..."
          wsl git config --global core.sshcommand $ssh_exe_path
          wsl git config --global gpg.ssh.program $op_ssh_sign_exe_path
        else
          echo "ERROR: OS environment variable not set or not supported"
          exit 1
        fi
        echo ""
        echo "Git configured with 1Password SSH Agent forwarding from Windows to WSL."
        echo ""

  1password:configure:help:
    internal: true
    cmds:
      - |
        echo "Note: 1Password SSH Agent must be set up on Windows first."
        echo ""
        echo "This is a two-step process to configure 1Password SSH Agent forwarding from Windows to WSL."
        echo "You need to have OMT installed on Windows and WSL both."
        echo ""
        echo "Step 1: Download the npiperelay.exe on Windows to a path accessible from WSL."
        echo "Step 2: Configure the SSH Agent and its socket on WSL."
        echo ""

  1password:configure:
    silent: true
    desc: "[WSL] âœ¨ Configure 1Password SSH Agent forwarding from Windows to WSL"
    cmds:
      - task: 1password:configure:help
      - task: 1password:configure:windows

